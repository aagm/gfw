gfw.ui.model.Analysis = cdb.core.Model.extend({
  defaults: {
    analyzing: false,
    helper: false
  }
});

gfw.ui.view.Analysis = cdb.core.View.extend({
  className: 'analysis',

  events: {
    'click .analysis_control' : 'startAnalyzing',
    'click .done' : '_onClickDone',
    'click .cancel' : 'onClickCancel'
  },

  initialize: function() {
    _.bindAll(this, '_onOverlayComplete');

    this.model = new gfw.ui.model.Analysis();

    this.model.on('change:hidden', this._toggle);
    this.model.on('change:analyzing', this._toggleAnalysis, this);

    this.selectedShape = null;
    this.selectedShapes = [];

    this.initStats = false;
    this.protectedArea = false;

    this.subscribecountry = this.options.subscribecountry;

    var template = $('#analysis-template').html();

    this.template = new cdb.core.Template({
      template: template,
      type: 'mustache'
    });

    this._initViews();
    this._initSubscribes();
  },

  _initViews: function() {
    this.info = new gfw.ui.view.AnalysisInfo();
    this.$el.append(this.info.render());
  },

  _initSubscribes: function() {
    subscribe('timeline:change_date_loss', _.bind(function(start_year, end_year, options) {
      if (options && options.publish) {
        this.range = '&begin='+start_year+'&end='+end_year;
        this.info.model.set({ 'subtitle': 'Jan-'+start_year+' to Jan-'+parseInt(end_year, 10) });

        if (this.info.model.get('hidden') && !url('?begin') && !url('?end')) return;

        this._getAlertCount();
      }
    }, this));

    subscribe('timeline:change_date_forma', _.bind(function(start_year, start_month, end_year, end_month, options) {
      if (options && options.publish) {
        var start_month_ = ((start_month - 71) % 12) + 1, // Convert months to (1-12)
            end_month_ = ((end_month - 71) % 12) + 1; // Convert months to (1-12)

        // Create dates, 0 padding months < 10
        var start = start_year + '-' + ((start_month_ < 10) ? ("0" + start_month_) : start_month_) + '-01',
            end = end_year + '-' + ((end_month_ < 10) ? ("0" + end_month_) : end_month_) + '-01';

        this.range = '&begin='+start+'&end='+end;

        if ((start_month_ >= 1 && start_month_ <= 12) && (end_month_ >= 1 && end_month_ <= 12)) {
          this.info.model.set({ 'subtitle': config.MONTHNAMES_SHORT[start_month_-1].charAt(0).toUpperCase() + config.MONTHNAMES_SHORT[start_month_-1].slice(1).toLowerCase()+"-"+start_year+" to "+config.MONTHNAMES_SHORT[end_month_-1].charAt(0).toUpperCase() + config.MONTHNAMES_SHORT[end_month_-1].slice(1).toLowerCase()+"-"+end_year });
        }

        if (this.info.model.get('hidden')) return;

        this._getAlertCount();
      }
    }, this));

    subscribe('timeline:change_date_imazon', _.bind(function(start_year, start_month, end_year, end_month) {
      var start_month_ = start_month - 1, // Convert months to (0-11)
          end_month_ = end_month - 1; // Convert months to (0-11)

      // Create dates, 0 padding months < 10
      var start = start_year + '-' + ((start_month < 10) ? ("0" + start_month) : start_month) + '-01',
          end = end_year + '-' + ((end_month < 10) ? ("0" + end_month) : end_month) + '-01';

      this.range = '&begin='+start+'&end='+end;
      if ((start_month >= 1 && start_month <= 12) && (end_month >= 1 && end_month <= 12)) {
        this.info.model.set({ 'subtitle': config.MONTHNAMES_SHORT[start_month_].charAt(0).toUpperCase() + config.MONTHNAMES_SHORT[start_month_].slice(1).toLowerCase()+"-"+start_year+" to "+config.MONTHNAMES_SHORT[end_month_].charAt(0).toUpperCase() + config.MONTHNAMES_SHORT[end_month_].slice(1).toLowerCase()+"-"+end_year });
      }

      if (this.info.model.get('hidden')) return;

      this._getAlertCount();
    }, this));

    subscribe('timeline:change_date_modis', _.bind(function(month, year) {
      var year_ = parseInt(year, 10),
          month_ = parseInt(month, 10);

      var q1 = config.MONTHNAMES_SHORT[(month_-3 >= 0) ? month_-3 : month_+9].charAt(0).toUpperCase() + config.MONTHNAMES_SHORT[(month_-3 >= 0) ? month_-3 : month_+9].slice(1).toLowerCase()
      var q2 = config.MONTHNAMES_SHORT[(month_-1 >= 0) ? month_-1 : month_+11].charAt(0).toUpperCase() + config.MONTHNAMES_SHORT[(month_-1 >= 0) ? month_-1 : month_+11].slice(1).toLowerCase()

      this.info.model.set({ 'subtitle': q1+"-"+year_+' to '+q2+'-'+year_ });

      if (this.info.model.get('hidden')) return;

      this._getAlertCount();
    }, this));

    subscribe('timeline:change_date_fires', _.bind(function(end_day, year) {
      var year_ = parseInt(year, 10),
          end_day_ = parseInt(end_day, 10),
          subtitle = 'Last week';

      switch (end_day_) {
        case 1:
          subtitle = 'Yesterday';
        break;

        case 2:
          subtitle = '2 days ago';
        break;

        case 3:
          subtitle = '3 days ago';
        break;
      }
      this.info.model.set({ 'subtitle': subtitle });

      if (this.info.model.get('hidden')) return;

      this._getAlertCount();
    }, this));
  },

  startAnalyzing: function(e) {
    e && e.preventDefault();

    if ($(this.$analysis_control).hasClass('disabled')) return;

    this.model.set('analyzing', true);
    $viewfinder.addClass('analysing');
    $map_coordinates.fadeIn();

    GFW.app.closeInfowindows();
    GFW.app.hideMarkers();

    this.disableAnalysisButton();
    this._setupDrawingManager();
  },

  onClickCancel: function(e) {
    e && e.preventDefault();

    this.model.set('analyzing', false);
    $viewfinder.removeClass('analysing');
    $map_coordinates.fadeOut();

    this._clearAnalysis();
    this._deleteSelectedShape();
    this._disableDoneButton();
    this._enableAnalysisButton();
  },

  _onClickDone: function(e) {
    e.preventDefault();

    if (this.$doneButton.attr('class') === 'done disabled') return;

    this.model.set('analyzing', false);
    $viewfinder.removeClass('analysing');
    $map_coordinates.fadeOut();

    this.info.model.set('closed', false);
    this._getAlertCount();

    GFW.app._showStoriesMarkers();
    GFW.app._loadMongabayLayer();

    if (this.selectedShape) this.selectedShape.setEditable(false);
  },

  _clearSelection: function() {
    if (this.selectedShapes.length > 0) {
      for (var i in this.selectedShapes) {
        if (this.selectedShapes[i]) {
          this.selectedShapes[i].setEditable(true);
          this.selectedShapes[i].setMap(null);
        }
      }

      this.selectedShapes = [];

      if (this.drawingManager && this.drawingManager.path) this.drawingManager.path = null;
    }
  },

  _deleteSelectedShape: function() {
    if (this.selectedShape) {
      this.selectedShape.setMap(null);
      this.selectedShape = null;
    }
  },

  _setSelection: function(shape) {
    this.selectedShape = shape;
  },

  _clearAnalysis: function() {
    this._clearSelection();
    this._deleteSelectedShape();

    if (this.drawingManager) {
      this.drawingManager.setDrawingMode(null);
      this.drawingManager.setOptions({ drawingControl: false });
      this.drawingManager.path = null;
    }
  },

  clearInfo: function() {
    this.model.set('area', '');
    this.info.model.set(this.info.model.defaults);

    if (this.protectedArea) this.protectedArea = false;

    this.initStats = false;

    this._clearAnalysis();
    if (!$('body').hasClass('embed')){
      this._enableAnalysisButton();
    }

    config.ISO = 'ALL';
    config.MAPOPTIONS.analysis = '';

    updateHash();
  },

  unblock_analysis: function() {
    this.$analysis_control.removeClass('analysis_blocked');
    this._enableAnalysisButton();
  },

  block_analysis: function() {
    this.$analysis_control.on('click',function(e){
      e.stopPropagation();
    }
    ).attr('data-tip', 'Please turn on the UMD tree cover loss layer to use the analysis tool')
     .addClass('analysis_blocked')
  },

  _enableAnalysisButton: function() {
    var control = this.$analysis_control
    
    control.removeClass('disabled');

    if (!control.hasClass('analysis_blocked')) {
      control.attr('data-tip', 'Analyze an area on the map');
    }
  },

  disableAnalysisButton: function() {
    this.$analysis_control.attr('data-tip', '')

    this.$analysis_control.addClass('disabled');
  },

  loadPolygon: function(the_geom, options) {
    var ha = 0,
        title = "";

    var style = config.OVERLAYSTYLES;
    style.editable = false;

    var features = new GeoJSON(the_geom, style);

    if (Array.isArray(features)) { // countries
      for (var i in features) {
        if (features[i].length > 0) {
          for (var j in features[i]) {
            var feature = features[i][j];
            feature.setMap(map);
            this.selectedShapes.push(feature);
          }
        } else {
          var feature = features[i];
          feature.setMap(map);
          this.selectedShapes.push(feature);
        }
      }
    } else {
      var feature = features;
      feature.setMap(map);
      this.selectedShapes.push(feature);
    }

    if (the_geom.features && the_geom.features[0]) {
       // countries
      //ha = formatNumber(Math.ceil((the_geom.features[0].properties['area']/10000) * 10) / 10, true);
      title = the_geom.features[0].properties['name'];
    } else {
      title = "User defined area";
    }
      ha = this._calcAreaPolygon(the_geom);

    this.model.set('area', JSON.stringify(the_geom));
    this.info.model.set('ha', ha);
    this.info.model.set('title', title);

    this._fitBounds();

    this._getAlertCount();
  },

  _fitBounds: function() {
    var bounds = new google.maps.LatLngBounds();
    var features = this.selectedShapes;

    for (var i in features) {
      if (features[i].length > 0) {
        for (var j in features[i]) {
          var feature = features[i][j];
          feature.setMap(map);
          this.selectedShapes.push(feature);
        }
      } else {
        var feature = features[i];
        feature.setMap(map);
        this.selectedShapes.push(feature);
      }

      var points = feature.latLngs.getArray()[0].getArray();

      // Extend bounds
      for (var z = 0; z < points.length; z++) {
        lat = points[z].lat();
        lng = points[z].lng();
        point = new google.maps.LatLng(lat, lng);
        bounds.extend(point);
      }
    }

    map.fitBounds(bounds);
  },

  _getAlertCount: function() {
    var that = this;

    var area = this.model.get('area'),
        not_analyze = (typeof area !== 'string' || area.length == 0),
        baselayer = config.BASELAYER,
        baseurl = "//<%= ENV['GFW_API_HOST'] %>/datasets/",
        range;
    if (config.BASELAYER === 'fires' || config.BASELAYER === null) return;

    if (!this.initStats) {
      this.$el.find('.stats .title, .stats ul').hide();
      this.info.show();

      this.initStats = true;
    } else {
      this.info.onChangeBaselayer();
    }

    this.info.setDraggable(true);

    var dataset = (baselayer === 'loss') ? 'umd' : baselayer;

    if (!this.range && url('?begin') && url('?end')) {
      this.range = '&begin=' + url('?begin') + '&end=' + url('?end');
      this.info.model.set({ 'subtitle': 'Jan-' + parseInt( url('?begin'), 10) +
                                    ' to Jan-' + parseInt( url('?end')  , 10)
                          });
    }

    if (baselayer === 'modis') {
      var mdate = url('?date') || '2013-12-15';
      range = this.range || '&date=' + mdate;

    } else if (baselayer === 'forma') {
      var fbegin = url('?begin'),
          fend   = url('?end');
      range = this.range || '&begin=' + fbegin + '&end=' + fend;

    } else if (baselayer === 'imazon') {
      var ibegin = '2007-0-9-01'  || url('?begin'),
          iend   = '2013-0-10-01' || url('?end');
      range = this.range || '&begin=' + ibegin + '&end=' + iend;

    } if (baselayer === 'loss') {
      var lbegin = '2000' || url('?begin'),
          lend   = '2013' || url('?end');
      range = this.range || '&begin=' + lbegin +'&end=' + lend;

    }

    config.MAPOPTIONS.analysis = (not_analyze) ? '?'+range.substr(1) : '?geom='+encodeURI(area)+range;

    if (config.ISO === 'ALL') {
      this.alertsUrl = baseurl+dataset+config.MAPOPTIONS.analysis;
      this.downloadUrl = baseurl+dataset+'.shp'+config.MAPOPTIONS.analysis;

      updateHash({ replace: true });
    } else {
      this.alertsUrl = baseurl+dataset+'?iso='+config.ISO+range;
      this.downloadUrl = baseurl+dataset+'.shp?iso='+config.ISO+range;
    }

    if (not_analyze) {
      if (this.$el.find('.analysis_info').is(':visible')) {
        this.$el.find('.analysis_info').hide();
      }
      return true;
    } else {
      if (! this.$el.find('.analysis_info').is(':visible')) {
        this.$el.find('.analysis_info').show();
      }
    }

    executeAjax(this.alertsUrl, {}, {
      success: _.bind(function(data) {
        var baselayer = config.BASELAYER,
            iso = (config.ISO && config.ISO !== 'ALL') ? config.ISO : 'GeoJSON';

        ga('send', 'event', 'Analysis', 'Success', iso + ' - ' + baselayer);

        if (baselayer === 'loss' && data) {
          var loss  = formatNumber(Math.ceil((data.loss) * 10) / 10, true);
          var gain  = formatNumber(Math.ceil((data.gain) * 10) / 10, true);

          this.info.model.set({
            'spinner': false,
            'baselayer': baselayer,
            'alert_count': false,
            'loss': loss,
            'gain': gain,
            'begin': data.begin,
            'end': data.end,
            'units': data.units,
            'subdisabled': true
          });
        } else if (baselayer === 'modis' && data && data.total) {
          this.info.model.set({
            'spinner': false,
            'baselayer': baselayer,
            'alert_count': formatNumber((data.total), true) + ' alerts',
            'download': this.downloadUrl,
            'subdisabled': true
          });
        } else if (baselayer === 'imazon' && data) {
          var defor = null,
              degrad = null;

          if (data[0]) defor = formatNumber(Math.ceil((data[0].value) * 10) / 10, true);
          if (data[1]) degrad = formatNumber(Math.ceil((data[1].value) * 10) / 10, true);

          this.info.model.set({
            'spinner': false,
            'baselayer': baselayer,
            'defor': defor,
            'degrad': degrad,
            'download': this.downloadUrl,
            'subdisabled': true
          });

          if (data[0] == null && data[1] == null) {
            this.info.model.set({
              'spinner': false,
              'baselayer': baselayer,
              'alert_count': 'No alerts',
              'subdisabled': true
            });
          }
        } else if (baselayer === "forma" && data) {
          if (this.subscribecountry) this.info.subscribe.show();

          if (data.value) {
            this.info.model.set({
              'spinner': false,
              'baselayer': baselayer,
              'alert_count': formatNumber(Math.ceil((data.value) * 10) / 10, true) + ' alerts',
              'download': this.downloadUrl,
              'subdisabled': false
            });
          } else {
            this.info.model.set({
              'spinner': false,
              'baselayer': baselayer,
              'alert_count': 'No alerts',
              'subdisabled': false
            });
          }
        } else {
          var disabled = baselayer !== "forma";

          this.info.model.set({
            'spinner': false,
            'baselayer': baselayer,
            'alert_count': 'No alerts',
            'subdisabled': true
          });
        }

        this.info.render();
        this.info.setDraggable(true);

        this.$el.find('.stats .error').fadeOut(150);

        this.$el.find('.stats .spinner').fadeOut(250, function() {
          that.$el.find('.stats .title, .stats ul').fadeIn(250);
        });
      }, this),
      error: _.bind(function(error) {
        ga('send', 'event', 'Analysis', 'Error', (config.ISO && config.ISO !== 'ALL') ? config.ISO : '');

        this.$el.find('.stats .title, .stats ul, .stats .spinner').fadeOut(150, function() {
          that.$el.find('.error').fadeIn(250);
        });
      }, this)
    });
  },

  loadCountry: function(ISO) {
    var that = this;

    var query = "https://wri-01.cartodb.com/api/v2/sql?q=SELECT the_geom, name, st_area(the_geom::geography) as area FROM ne_50m_admin_0_countries WHERE iso_a3 ='" + ISO + "'&format=geojson";

    $.ajax({
      url: query,
      dataType: 'jsonp',
      success: function(the_geom) {
        if (the_geom.features.length != 0 ) {
          that.disableAnalysisButton();
          that.loadPolygon(the_geom);
        } else {
          config.ISO = 'ALL';
          updateHash();
        }
      }
    });
  },

  _setupDrawingManager: function() {
    var self = this;

    var style = config.OVERLAYSTYLES;
    style.editable = true;

    var options = {
      drawingModes: [ google.maps.drawing.OverlayType.POLYGON ],
      drawingControl: false,
      polygonOptions: style,
      panControl: false,
      map: map
    };

    // Create the drawing manager
    this.drawingManager = new google.maps.drawing.DrawingManager(options);

    // Start drawing right away
    this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);

    // Event binding
    google.maps.event.addListener(this.drawingManager, 'overlaycomplete', this._onOverlayComplete);
  },

  _enableDoneButton: function() {
    this.$doneButton.removeClass('disabled');
  },

  _disableDoneButton: function() {
    this.$doneButton.addClass('disabled');
  },

  _onOverlayComplete: function(e) {
    var polygon = {};
    var c0 = [];
    var area = null;

    this.drawingManager.setDrawingMode(null);
    this.drawingManager.path = e.overlay.getPath().getArray();
    this.drawingManager.setOptions({ drawingControl: false });
    this._enableDoneButton();

    var newShape = e.overlay;
    newShape.type = e.type;

    this._setSelection(newShape);

    polygon = {
      'type': 'Polygon',
      'coordinates': [
        $.map(this.drawingManager.path, function(latlong, index) {
          return [[latlong.lng(), latlong.lat()]];
        })
      ]
    };

    if (typeof polygon === 'undefined' || polygon === '' || polygon.coordinates[0].length < 3) {
      this.$('.cancel').click();

      return;
    }

    // Close the polygon:
    c0 = polygon.coordinates[0][0];
    polygon.coordinates[0].push(c0);

    //area = formatNumber(Math.ceil((google.maps.geometry.spherical.computeArea(this.drawingManager.path)/10000) * 10) / 10, true)

    this.model.set('area', JSON.stringify(polygon));
    this.info.model.set('ha', this._calcAreaPolygon(polygon));
    this.info.model.set('title', this.info.model.defaults.title);
  },

   _calcAreaPolygon: function(polygon) {
    // https://github.com/maxogden/geojson-js-utils
    var area = 0;
    var points = polygon.coordinates[0];
    var j = points.length - 1;
    var p1, p2;

    for (var i = 0; i < points.length; j = i++) {
      var p1 = {
        x: points[i][1],
        y: points[i][0]
      };
      var p2 = {
        x: points[j][1],
        y: points[j][0]
      };
      area += p1.x * p2.y;
      area -= p1.y * p2.x;
    }

    area /= 2;

    return formatNumber(Math.ceil((area*1000000) * 10) / 10, true);
  },

  _toggle: function() {
    var that = this;

    if(this.model.get('hidden')) {
      this.$el.fadeOut();
    } else {
      this.$el.fadeIn();
    }
  },

  _toggleAnalysis: function() {
    if (this.model.get('analyzing')) {
      ga('send', 'event', 'Analysis', 'Start', (config.ISO && config.ISO !== 'ALL') ? config.ISO : '');

      LayerSelector.hide();
      Legend.hide();
      SearchBox.hide();
      publish('timeline:hide');

      this.$helper.delay(250).fadeIn(250);
    } else {
      if (this.$helper.is(':visible')) {
        this.$helper.fadeOut(250, function() {
          LayerSelector.show();
          Legend.show();
          SearchBox.show();
          publish('timeline:show');
        });
      } else {
        this.$helper.hide();
        LayerSelector.show();
        Legend.show();
        SearchBox.show();
        publish('timeline:show');
      }
    }
  },

  render: function() {
    var that = this;

    this.$el.append(this.template.render( this.model.toJSON() ));

    this.$helper = this.$el.find('.helper_bar');
    this.$analysis_control = this.$el.find('.analysis_control');
    $(this.$analysis_control).tipsy({ title: 'data-tip', fade: true, gravity: 'w' });
    $viewfinder = $('#viewfinder');
    $map_coordinates = $('.coordinates.map_coordinates');

    this.$doneButton = this.$el.find('.done');

    return this.$el;
  }
});


gfw.ui.model.AnalysisInfo = cdb.core.Model.extend({
  defaults: {
    hidden: true,
    baselayer: config.BASELAYER,
    spinner: true,
    title: 'User defined area',
    subtitle: 'Jan-2000 to Jan-2013',
    subdisabled: true,
    alert_count: '',
    loss: '',
    gain: '',
    begin: '',
    end: '',
    units: '',
    download: false,
    defor: '',
    degrad: ''
  }
});

gfw.ui.view.AnalysisInfo = gfw.ui.view.Widget.extend({
  className: 'analysis_info',

  events: {
    'click .toggle': '_toggleOpen'
  },

  initialize: function() {
    _.bindAll( this, 'toggleDraggable', 'onStopDragging', 'open', 'close', '_toggle');

    this.model = new gfw.ui.model.AnalysisInfo({ baselayer: config.BASELAYER });

    this.model.on('change:hidden',    this._toggle);
    this.model.on('change:draggable', this.toggleDraggable,    this);
    this.model.on('change:baselayer', this.onChangeBaselayer, this);
    this.model.on('change:subtitle',  this._updateSubtitle);

    this.model.set('containment', '#map-container .map');

    if ($('body').hasClass('embed')){
      this.$el.css('right','-99999px');
    }
    this._initViews();
    this._initBindings();

    var template = $('#analysis_info-template').html();

    this.template = new cdb.core.Template({
      template: template,
      type: 'mustache'
    });
  },

  _initViews: function() {
    this.subscribe = new gfw.ui.view.AnalysisSubscribe();
    $('body').append(this.subscribe.render());

    this.reset = new gfw.ui.view.AnalysisReset();
    $('body').append(this.reset.render());
  },

  _initBindings: function() {
    var that = this;

    $(document).on('click', '.reset_control', function(e) {
      e.preventDefault();

      var pos = that.$el.find(".reset_control").offset();

      that.reset.$el.css({
        top: pos.top,
        left: pos.left
      });

      that.reset.show();
    });

    $(document).on('click', '.subscribe_control', function(e) {
      e.preventDefault();

      if ($(e.target).hasClass('disabled')) return;

      that.subscribe.show();
    });

    $(document).on('click', '.download', function(e) {
      e.preventDefault();
    });

    $(document).on('click', '.analysis_dropdown a', function(e) {
      var iso = (config.ISO && config.ISO !== 'ALL') ? config.ISO : 'GeoJSON';

      ga('send', 'event', 'Analysis', 'Download', iso + ' - ' + config.BASELAYER + ' - ' + $(e.target).text());
    });
  },

  onChangeBaselayer: function() {
    if (this.model.get('closed')) {
      this.close();
    } else {
      this.model.set('closed', false);
      this.render();
      this.$el.removeClass('closed');
    }
  },

  _toggle: function() {
    if (this.model.get('hidden') || this.model.get('closed')) {
      this.$el.fadeOut();
      this.model.set('closed', true);
    } else {
      this.$el.fadeIn();
    }
  },

  show: function() {
    this.model.set('hidden', false);
  },

  hide: function() {
    this.model.set('hidden', true);
  },

  resize: function() {
    var that = this;

    var $header = this.$el.find('.info'),
        $stats = this.$el.find('.stats'),
        $controls = this.$el.find('.info_controls'),
        controls_height = 0;

    if( $controls.is(":visible") ){
      controls_height = $controls.outerHeight();
    }
    var height = $header.outerHeight()+$stats.outerHeight()+controls_height;

    this.$content.animate({
      opacity: 1,
      height: height
    }, { duration: 100 });
  },

  open: function() {
    var that = this;

    this.model.set('closed', false);

    this.$info_title.fadeOut(250, function() {
      that.resize();
      that.$shadow.fadeIn(250);
    });

    this.$el.removeClass('closed');
  },

  close: function() {
    var that = this;
    this.model.set('closed', true);

    this.$content.css('overflow', 'hidden');
    this.$content.animate({
      opacity: 0,
      height: '15px',
      padding: 0
    }, 250, function() {
      that.$info_title.fadeIn(250);
      that.$shadow.fadeOut(250);
    });

    this.$el.addClass('closed');
  },

  render: function() {
    var that = this;

    var options = _.extend(this.model.toJSON(), {
      umd: config.BASELAYER === 'loss',
      imazon: config.BASELAYER === 'imazon',
      modis: config.BASELAYER === 'modis'
    });

    this.$el.html(this.template.render( options ));

    this.$content     = this.$el.find(".info_content");
    this.$info_title  = this.$el.find(".info_title");
    this.$title       = this.$el.find(".info .titles .title");
    this.$dataset     = this.$el.find(".alert .title");
    this.$shadow      = this.$el.find(".shadow");
    this.$alert_count = this.$el.find("#alerts-count");
    
    if ($('body').hasClass('embed')){
      this.$el.hide();
      this.close();
      setTimeout(function(){
        that.$el.css('right','45px').delay(300).fadeIn();
      },1000)
    }

    if (this.model.get('download')) {
      this.downloadDropdown = new gfw.ui.view.DownloadDropdown({
        model: this.model,
        downloadEl: this.$el.find('.download')
      });

      this.$el.append(this.downloadDropdown.render());
    }

    return this.$el;
  }
});


gfw.ui.view.DownloadDropdown = cdb.core.View.extend({
  className: 'analysis_dropdown hidden',

  initialize: function() {
    var template = $("#analysis_dropdown-template").html();

    this.template = new cdb.core.Template({
      template: template,
      type: 'mustache'
    });
  },

  _generateURL: function(format) {
    var re = /shp/gi;
    var str = this.model.get('download');

    return str.replace(re, format);
  },

  render: function() {
    var options = {
      urls: [
        { name: "SVG",     url: this._generateURL('svg') },
        { name: "GeoJSON", url: this._generateURL('geojson') },
        { name: "SHP",     url: this._generateURL('shp') },
        { name: "KML",     url: this._generateURL('kml') },
        { name: "CSV",     url: this._generateURL('csv') }
      ]
    };

    this.$el.html(this.template.render( options ));

    var $el = this.$el;

    $('.download').qtip({
      show: 'click',
      hide: {
        event: 'click unfocus'
      },
      content: {
        text: $el
      },
      position: {
        my: 'top right',
        at: 'bottom right',
        target: $('.download'),
        adjust: {
          x: 10
        }
      },
      style: {
        tip: {
          corner: 'top right',
          mimic: 'top center',
          border: 1,
          width: 10,
          height: 6
        }
      }
    });

    return this.$el;
  }
});

gfw.ui.model.AnalysisSubscribe = Backbone.Model.extend({

  defaults: {
    title: "Subscribe to alerts",
    help: "You will receive a monthly email summarizing forest change in this area",
    hidden: false,
    placeholder: "Enter your email",
    mode: "subscribe",
    button_title: "SUBSCRIBE",
    input_type: "text"
  }

});

gfw.ui.view.AnalysisSubscribe = gfw.ui.view.Widget.extend({
  className: 'analysis_subscribe',

  events: {
    'click .send':  '_send',
    'click .close': 'hide'
  },

  initialize: function() {
    _.bindAll( this, 'toggle', '_toggleMode', '_updateTitle', '_updateHelp', '_updateButtonTitle', '_updateSubtitle', '_updatePlaceholder', '_updateInputType', '_onKeyDown', '_sendData' );

    this.options = _.extend(this.options, this.defaults);

    this.model = new gfw.ui.model.AnalysisSubscribe();

    this.model.on('change:hidden',        this.toggle);
    this.model.on('change:title',         this._updateTitle);
    this.model.on('change:button_title',  this._updateButtonTitle);
    this.model.on('change:subtitle',      this._updateSubtitle);
    this.model.on('change:help',          this._updateHelp);
    this.model.on('change:placeholder',   this._updatePlaceholder);
    this.model.on('change:input_type',    this._updateInputType);
    this.model.on('change:mode',          this._toggleMode);

    this.$backdrop = $('.backdrop');

    var template = $('#analysis_subscribe-template').html();

    this.template = new cdb.core.Template({
      template: template,
      type: 'mustache'
    });
  },

  show: function() {
    var that = this;

    this.$el.fadeIn(250);
    this.$backdrop.show();

    $(document).on('keydown', this._onKeyDown);

    this.$backdrop.on('click', function() {
      that.hide();
    });
  },

  hide: function(e) {
    e && e.preventDefault();

    var that = this;

    this.$el.fadeOut(250, function() {
      that._clearErrors();
      that._setMode('subscribe');
    });

    this.$backdrop.fadeOut(250);

    $(document).off('keydown');

    this.$backdrop.off('click');
  },

  _onKeyDown: function(e) {
    if (e.which == 27) {
      this._onEscKey(e);
    } else if (e.which == 13) {
      this._send(e);

      return;
    } else {
      this._clearErrors();
    }


  },

  _onEscKey: function(e) {
    e && e.preventDefault();

    this.hide();
  },

  _clearErrors: function() {
    this.$el.find('.input-field .icon.error').fadeOut(250);
    this.$el.find('.input-field').removeClass('error');
    this.$el.find('.input-field .error_input_label').fadeOut(250);
    this.$el.find('.input-field .error_input_label').html('');
  },

  _send: function(e) {
    var that = this;

    e && e.preventDefault();

    if(this.$('.btn').hasClass('disabled')) return;

    this.$('.btn').addClass('disabled');

    var mode = this.model.get("mode");
    var error = false;

    if (mode === 'subscribe') {
      this._clearErrors();

      var email = this.$el.find('input.field').val();

      if (!validateEmail(email)) {
        this.$el.find('.input-field').addClass('error');
        this.$el.find('.input-field').find('.icon.error').fadeIn(250);
        this.$el.find('.input-field').find('.error_input_label').html('Please enter a valid email');
        this.$el.find('.input-field').find('.error_input_label').fadeIn(250);

        error = true;

        this.$('.btn').removeClass('disabled');
      }

      if (!error) {
        that._sendData();
      }
    } else {
      this.hide();
    }
  },

  _sendData: function() {
    var that      = this,
        $form     = this.$el.find('form'),
        $the_geom = $form.find('#area_the_geom'),
        form_data = null;

    if (Analysis.selectedShapes && Analysis.selectedShapes.length > 0) {
      s = Analysis.selectedShapes;
      $the_geom.val(JSON.stringify({
        'type': 'MultiPolygon',
        'coordinates': [
          $.map(s, function(shape, index) {
            return [
              $.map(shape.getPath().getArray(), function(latlng, index) {
                return [[latlng.lng().toFixed(4), latlng.lat().toFixed(4)]];
              })
            ]
          })
        ]
      }));
    } else {
      s = Analysis.selectedShape;
      $the_geom.val(JSON.stringify({
        'type': 'MultiPolygon',
        'coordinates': [[
          $.map(s.getPath().getArray(), function(latlng, index) {
            return [[latlng.lng().toFixed(4), latlng.lat().toFixed(4)]];
          })
        ]]
      }));
    }

    if (config.ISO && config.ISO !== 'ALL') {
      form_data = '{"topic": "updates/forma", "iso": '+'"'+config.ISO+'"'+', "email": "'+$form.find("#area_email").val()+'"}';
    } else {
      form_data = '{"topic": "updates/forma", "geom": '+$the_geom.val()+', "email": "'+$form.find("#area_email").val()+'"}';
    }

    $.ajax({
      type: 'POST',
      url: $form.attr('action'),
      crossDomain: true,
      data: form_data,
      dataType: 'json',
      success: function(responseData, textStatus, jqXHR) {
        that._setMode('thanks');
      },
      error: function (responseData, textStatus, errorThrown) {
        alert('POST failed.');
      }
    });
  },

  _setMode: function(mode) {
    this._clearErrors();
    this.$('.btn').removeClass('disabled');

    if (mode === 'subscribe') {
      this.model.set({
        title: this.model.defaults.title,
        help: this.model.defaults.help,
        button_title: this.model.defaults.button_title,
        placeholder: this.model.defaults.placeholder,
        input_type: 'email',
        mode: mode
      });

      this.$el.find('input').val('');
      this.$el.find('input').focus();
    } else if (mode === 'thanks') {
      this.model.set({
        title: 'Thank you',
        help: "We've sent you a confirmation email to subscribe to this area.",
        button_title: 'Close',
        mode: mode
      });

      this.$('input').val('');
    }
  },

  _toggleMode: function() {
    var mode = this.model.get('mode');

    if (mode === 'subscribe') {
      this.$('.help').fadeOut(250);
      this.$('.input-field').show();
    } else if (mode === 'thanks') {
      this.$('.help').fadeIn(250);
      this.$('.input-field').hide();
    }
  },

  _updatePlaceholder: function() {
    this.$el.find(".holder").html(this.model.get('placeholder'));
  },

  _updateInputType: function() {
    this.$el.find(".field").prop("type", this.model.get('input_type'));
  },

  _updateHelp: function() {
    this.$el.find(".help").html(this.model.get('help'));
  },

  _updateSubtitle: function() {
    this.$el.find(".subtitle").html(this.model.get('subtitle'));
  },

  _updateButtonTitle: function() {
    this.$el.find(".send span").html(this.model.get('button_title'));
  },

  _updateTitle: function() {
    this.$el.find('.title').html(this.model.get('title'));
  },

  render: function() {
    var that = this;

    this.$el.append(this.template.render( this.model.toJSON() ));

    $(this.$el.find(".input-field")).smartPlaceholder();

    return this.$el;
  }
});


gfw.ui.model.AnalysisReset = cdb.core.Model.extend({
  defaults: {
    hidden: true
  }
});

gfw.ui.view.AnalysisReset = cdb.core.View.extend({
  className: 'analysis_reset',

  events: {
    'click a.delete' : '_onClickDelete',
    'click a.cancel' : '_onClickCancel'
  },

  initialize: function() {
    this.model = new gfw.ui.model.AnalysisReset();

    this.model.bind('change:hidden', this._toggleReset, this);

    var template = $('#analysis_reset-template').html();

    this.template = new cdb.core.Template({
      template: template,
      type: 'mustache'
    });
  },

  _toggleReset: function() {
    if(this.model.get('hidden')) {
      this.$el.fadeOut(250);
    } else {
      this.$el.fadeIn(250);
    }
  },

  show: function() {
    this.model.set('hidden', false);
  },

  hide: function() {
    this.model.set('hidden', true);
  },

  _onClickDelete: function(e) {
    e.preventDefault();

    this._onClickCancel();
    Analysis.onClickCancel();
    Analysis.clearInfo();
  },

  _onClickCancel: function(e) {
    e && e.preventDefault();

    this.hide();
  },

  render: function() {
    this.$el.html(this.template.render( this.model.toJSON() ));

    return this.$el;
  }
});
